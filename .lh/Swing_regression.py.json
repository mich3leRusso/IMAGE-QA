{
    "sourceFile": "Swing_regression.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 51,
            "patches": [
                {
                    "date": 1757596533508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757596539771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-class\n\\ No newline at end of file\n+class Swing_regression()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596549854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-class Swing_regression()\n\\ No newline at end of file\n+class Swing_regression(nn.Model):\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596556571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,2 @@\n+import nn\n class Swing_regression(nn.Model):\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596624402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,2 @@\n-import nn\n+import tor\n class Swing_regression(nn.Model):\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596629940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3 @@\n+import torch \n+import torch\n+class Swing_regression(nn.Model):\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596636785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,4 @@\n+import torch \n+import torch.nn\n+from \n+class Swing_regression(nn.Model):\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596643604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,4 @@\n import torch \n import torch.nn\n-from \n-class Swing_regression(nn.Model):\n-import torch \n-import torch\n-class Swing_regression(nn.Model):\n-import tor\n+from transformers import \n class Swing_regression(nn.Model):\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596649492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,4 @@\n import torch \n import torch.nn\n-from transformers import \n+from transformers import Swin\n class Swing_regression(nn.Model):\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596657256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n import torch \n import torch.nn\n-from transformers import Swin\n-class Swing_regression(nn.Model):\n\\ No newline at end of file\n+from transformers import Swinv2Model\n+\n+class Swing_regression(nn.):\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596665024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n import torch \n import torch.nn\n from transformers import Swinv2Model\n \n-class Swing_regression(nn.):\n\\ No newline at end of file\n+class Swing_regression(nn.Module):\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596671725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,8 @@\n import torch \n import torch.nn\n from transformers import Swinv2Model\n \n-class Swing_regression(nn.Module):\n\\ No newline at end of file\n+class Swing_regression(nn.Module):\n+    \"\"\"\n+    \n+    \"\"\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596687212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,6 +3,6 @@\n from transformers import Swinv2Model\n \n class Swing_regression(nn.Module):\n     \"\"\"\n-    \n+        This class adapts the Swing \n     \"\"\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596701257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import torch \n-import torch.nn\n+import torch.nn a\n from transformers import Swinv2Model\n \n class Swing_regression(nn.Module):\n     \"\"\"\n-        This class adapts the Swing \n+        This class adapts the Swing Transformer \n     \"\"\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596715591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,8 @@\n+import torch \n+import torch.nn as nn\n+from transformers import Swinv2Model\n+\n+class Swin_regression(nn.Module):\n+    \"\"\"\n+        This class adapts the Swing Transformer \n+    \"\"\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596722446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,6 @@\n from transformers import Swinv2Model\n \n class Swin_regression(nn.Module):\n     \"\"\"\n-        This class adapts the Swing Transformer \n-    \"\"\"\n-import torch \n-import torch.nn a\n-from transformers import Swinv2Model\n-\n-class Swing_regression(nn.Module):\n-    \"\"\"\n-        This class adapts the Swing Transformer \n+        This class adapts the Swin Transformer into a  \n     \"\"\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596772395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,6 +3,6 @@\n from transformers import Swinv2Model\n \n class Swin_regression(nn.Module):\n     \"\"\"\n-        This class adapts the Swin Transformer into a  \n+        This class adapts the Swin Transformer for the re \n     \"\"\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596779005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,6 +3,6 @@\n from transformers import Swinv2Model\n \n class Swin_regression(nn.Module):\n     \"\"\"\n-        This class adapts the Swin Transformer for the re \n+        This class adapts the Swin Transformer for the regression task \n     \"\"\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596787502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,5 +4,6 @@\n \n class Swin_regression(nn.Module):\n     \"\"\"\n         This class adapts the Swin Transformer for the regression task \n-    \"\"\"\n\\ No newline at end of file\n+    \"\"\"\n+    def __init__()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596795294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,5 +5,5 @@\n class Swin_regression(nn.Module):\n     \"\"\"\n         This class adapts the Swin Transformer for the regression task \n     \"\"\"\n-    def __init__()\n\\ No newline at end of file\n+    def __init__(self,config)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596801013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,5 +5,5 @@\n class Swin_regression(nn.Module):\n     \"\"\"\n         This class adapts the Swin Transformer for the regression task \n     \"\"\"\n-    def __init__(self,config)\n\\ No newline at end of file\n+    def __init__(self,model)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596822126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,5 +5,5 @@\n class Swin_regression(nn.Module):\n     \"\"\"\n         This class adapts the Swin Transformer for the regression task \n     \"\"\"\n-    def __init__(self,model)\n\\ No newline at end of file\n+    def __init__(self,model_name=\"=\"\")\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596833475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,5 +5,5 @@\n class Swin_regression(nn.Module):\n     \"\"\"\n         This class adapts the Swin Transformer for the regression task \n     \"\"\"\n-    def __init__(self,model_name=\"=\"\")\")\n\\ No newline at end of file\n+    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596840306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,5 +5,5 @@\n class Swin_regression(nn.Module):\n     \"\"\"\n         This class adapts the Swin Transformer for the regression task \n     \"\"\"\n-    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\")\n\\ No newline at end of file\n+    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\", ):\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596854980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,5 +5,5 @@\n class Swin_regression(nn.Module):\n     \"\"\"\n         This class adapts the Swin Transformer for the regression task \n     \"\"\"\n-    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\", ):\n\\ No newline at end of file\n+    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",freeze_backbone ):\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596862073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,5 +5,5 @@\n class Swin_regression(nn.Module):\n     \"\"\"\n         This class adapts the Swin Transformer for the regression task \n     \"\"\"\n-    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",freeze_backbone ):\n\\ No newline at end of file\n+    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",Train ):\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596870011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,5 +5,5 @@\n class Swin_regression(nn.Module):\n     \"\"\"\n         This class adapts the Swin Transformer for the regression task \n     \"\"\"\n-    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",Train ):\n\\ No newline at end of file\n+    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",Train=True):\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596876006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,5 +5,6 @@\n class Swin_regression(nn.Module):\n     \"\"\"\n         This class adapts the Swin Transformer for the regression task \n     \"\"\"\n-    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",Train=True):\n\\ No newline at end of file\n+    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",Train=True):\n+        self.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596900989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,5 +6,17 @@\n     \"\"\"\n         This class adapts the Swin Transformer for the regression task \n     \"\"\"\n     def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",Train=True):\n-        self.\n\\ No newline at end of file\n+        self.__init__()\n+\n+                # Load pretrained SwinV2\n+        self.backbone = Swinv2Model.from_pretrained(model_name)\n+        hidden_size = self.backbone.config.hidden_size\n+        \n+        # Optional: freeze backbone weights for small datasets\n+        if freeze_backbone:\n+            for param in self.backbone.parameters():\n+                param.requires_grad = False\n+        \n+        # Regression head: maps Swin features to one value\n+        self.reg_head = nn.Linear(hidden_size, 1)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596908980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     \"\"\"\n     def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",Train=True):\n         self.__init__()\n \n-                # Load pretrained SwinV2\n+        # Load pretrained SwinV2\n         self.backbone = Swinv2Model.from_pretrained(model_name)\n         hidden_size = self.backbone.config.hidden_size\n         \n         # Optional: freeze backbone weights for small datasets\n"
                },
                {
                    "date": 1757596915197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         self.backbone = Swinv2Model.from_pretrained(model_name)\n         hidden_size = self.backbone.config.hidden_size\n         \n         # Optional: freeze backbone weights for small datasets\n-        if freeze_backbone:\n+        if not train:\n             for param in self.backbone.parameters():\n                 param.requires_grad = False\n         \n         # Regression head: maps Swin features to one value\n"
                },
                {
                    "date": 1757596921403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,5 +18,7 @@\n             for param in self.backbone.parameters():\n                 param.requires_grad = False\n         \n         # Regression head: maps Swin features to one value\n-        self.reg_head = nn.Linear(hidden_size, 1)\n\\ No newline at end of file\n+        self.reg_head = nn.Linear(hidden_size, 1)\n+\n+    def\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596928665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,5 +20,5 @@\n         \n         # Regression head: maps Swin features to one value\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n-    def\n\\ No newline at end of file\n+    def foward(sel)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596937108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,5 +20,6 @@\n         \n         # Regression head: maps Swin features to one value\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n-    def foward(sel)\n\\ No newline at end of file\n+    def foward(self,batch):\n+        retur\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596945027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,27 @@\n+import torch \n+import torch.nn as nn\n+from transformers import Swinv2Model\n+\n+class Swin_regression(nn.Module):\n+    \"\"\"\n+        This class adapts the Swin Transformer for the regression task \n+    \"\"\"\n+    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",Train=True):\n+        self.__init__()\n+\n+        # Load pretrained SwinV2\n+        self.backbone = Swinv2Model.from_pretrained(model_name)\n+        hidden_size = self.backbone.config.hidden_size\n+        \n+        # Optional: freeze backbone weights for small datasets\n+        if not train:\n+            for param in self.backbone.parameters():\n+                param.requires_grad = False\n+        \n+        # Regression head: maps Swin features to one value\n+        self.reg_head = nn.Linear(hidden_size, 1)\n+\n+    def foward(self,batch):\n+        \n+        \n+        return results \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596951908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,32 +21,7 @@\n         # Regression head: maps Swin features to one value\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n+        self.__mo\n         \n-        \n-        return results \n-import torch \n-import torch.nn as nn\n-from transformers import Swinv2Model\n-\n-class Swin_regression(nn.Module):\n-    \"\"\"\n-        This class adapts the Swin Transformer for the regression task \n-    \"\"\"\n-    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",Train=True):\n-        self.__init__()\n-\n-        # Load pretrained SwinV2\n-        self.backbone = Swinv2Model.from_pretrained(model_name)\n-        hidden_size = self.backbone.config.hidden_size\n-        \n-        # Optional: freeze backbone weights for small datasets\n-        if not train:\n-            for param in self.backbone.parameters():\n-                param.requires_grad = False\n-        \n-        # Regression head: maps Swin features to one value\n-        self.reg_head = nn.Linear(hidden_size, 1)\n-\n-    def foward(self,batch):\n\\ No newline at end of file\n-        retur\n+        return results \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596965977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n class Swin_regression(nn.Module):\n     \"\"\"\n         This class adapts the Swin Transformer for the regression task \n     \"\"\"\n-    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",Train=True):\n+    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",tyrain=True):\n         self.__init__()\n \n         # Load pretrained SwinV2\n         self.backbone = Swinv2Model.from_pretrained(model_name)\n@@ -21,7 +21,7 @@\n         # Regression head: maps Swin features to one value\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n-        self.__mo\n+        self._\n         \n         return results \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757596994272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n class Swin_regression(nn.Module):\n     \"\"\"\n         This class adapts the Swin Transformer for the regression task \n     \"\"\"\n-    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",tyrain=True):\n+    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",train=True):\n         self.__init__()\n \n         # Load pretrained SwinV2\n         self.backbone = Swinv2Model.from_pretrained(model_name)\n@@ -21,7 +21,7 @@\n         # Regression head: maps Swin features to one value\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n-        self._\n+        self.backbone()\n         \n         return results \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757597000527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,7 +21,7 @@\n         # Regression head: maps Swin features to one value\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n-        self.backbone()\n+        self.backbone(images)\n         \n         return results \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757597008270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,7 +21,8 @@\n         # Regression head: maps Swin features to one value\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n-        self.backbone(images)\n+        self.backbone(batch)\n+        sel\n         \n         return results \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757597017207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,8 @@\n         # Regression head: maps Swin features to one value\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n-        self.backbone(batch)\n+        embeself.backbone(batch)\n         sel\n         \n         return results \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757597025795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,8 @@\n         # Regression head: maps Swin features to one value\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n-        embeself.backbone(batch)\n-        sel\n+        embedding=self.backbone(batch)\n+        outputsel\n         \n         return results \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757597031858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,7 +22,7 @@\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n         embedding=self.backbone(batch)\n-        outputsel\n+        output=self.regr\n         \n         return results \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757597044394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,7 +22,7 @@\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n         embedding=self.backbone(batch)\n-        output=self.regr\n+        output=self.reg_head()\n         \n         return results \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757597052307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,7 +22,7 @@\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n         embedding=self.backbone(batch)\n-        output=self.reg_head()\n+        output=self.reg_head(embedding)\n         \n\\ No newline at end of file\n-        return results \n+        return resuloutts \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757597058005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,5 +24,5 @@\n     def foward(self,batch):\n         embedding=self.backbone(batch)\n         output=self.reg_head(embedding)\n         \n-        return resuloutts \n\\ No newline at end of file\n+        return output \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757597093475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,7 +22,8 @@\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n         embedding=self.backbone(batch)\n+        print\n         output=self.reg_head(embedding)\n         \n         return output \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757597101426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+import torch \n+import torch.nn as nn\n+from transformers import Swinv2Model\n+\n+class Swin_regression(nn.Module):\n+    \"\"\"\n+        This class adapts the Swin Transformer for the regression task \n+    \"\"\"\n+    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",train=True):\n+        self.__init__()\n+\n+        # Load pretrained SwinV2\n+        self.backbone = Swinv2Model.from_pretrained(model_name)\n+        hidden_size = self.backbone.config.hidden_size\n+        \n+        # Optional: freeze backbone weights for small datasets\n+        if not train:\n+            for param in self.backbone.parameters():\n+                param.requires_grad = False\n+        \n+        # Regression head: maps Swin features to one value\n+        self.reg_head = nn.Linear(hidden_size, 1)\n+\n+    def foward(self,batch):\n+        embedding=self.backbone(batch)\n+        print(embedding.shape)\n+        output=self.reg_head(embedding)\n+        \n+        return output \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757597109143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,38 +21,11 @@\n         # Regression head: maps Swin features to one value\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n+        batch.shape\n         embedding=self.backbone(batch)\n         print(embedding.shape)\n         output=self.reg_head(embedding)\n         \n-        return output \n-import torch \n-import torch.nn as nn\n-from transformers import Swinv2Model\n-\n-class Swin_regression(nn.Module):\n-    \"\"\"\n-        This class adapts the Swin Transformer for the regression task \n-    \"\"\"\n-    def __init__(self,model_name=\"microsoft/swinv2-tiny-patch4-window8-256\",train=True):\n-        self.__init__()\n-\n-        # Load pretrained SwinV2\n-        self.backbone = Swinv2Model.from_pretrained(model_name)\n-        hidden_size = self.backbone.config.hidden_size\n         \n-        # Optional: freeze backbone weights for small datasets\n-        if not train:\n-            for param in self.backbone.parameters():\n-                param.requires_grad = False\n-        \n-        # Regression head: maps Swin features to one value\n-        self.reg_head = nn.Linear(hidden_size, 1)\n-\n-    def foward(self,batch):\n-        embedding=self.backbone(batch)\n-        print\n-        output=self.reg_head(embedding)\n-        \n         return output \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757597115466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,7 +25,7 @@\n         batch.shape\n         embedding=self.backbone(batch)\n         print(embedding.shape)\n         output=self.reg_head(embedding)\n-        \n-        \n+        print(output.shape)\n+\n         return output \n\\ No newline at end of file\n"
                },
                {
                    "date": 1757597121465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         # Regression head: maps Swin features to one value\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n-        batch.shape\n+        printbatch.shape\n         embedding=self.backbone(batch)\n         print(embedding.shape)\n         output=self.reg_head(embedding)\n         print(output.shape)\n"
                },
                {
                    "date": 1757597130240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,10 @@\n         # Regression head: maps Swin features to one value\n         self.reg_head = nn.Linear(hidden_size, 1)\n \n     def foward(self,batch):\n-        printbatch.shape\n+        \n+        print(batch.shape)\n         embedding=self.backbone(batch)\n         print(embedding.shape)\n         output=self.reg_head(embedding)\n         print(output.shape)\n"
                }
            ],
            "date": 1757596533508,
            "name": "Commit-0",
            "content": "class"
        }
    ]
}